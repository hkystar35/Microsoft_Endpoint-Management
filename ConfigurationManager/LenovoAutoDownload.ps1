<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.134
     Generated on:       14/02/2017 23:00
     Generated by:       Maurice.Daly
	 File Name: 		 LenovoAutoDownloadGUI.ps1
	 Version:			 1.4
    --------------------------------------------------------------------------------
    .DESCRIPTION
        This script allows you to automate the process of keeping your Lenovo
		driver packs up to date on both your SCCM and MDT installations. 
		The script reads the Lenovo Driver Cabinet XML for models you have specified 
		and then downloads the corresponding latest driver packs and BIOS updates.
		
		The script generates a GUI allowing you to select features such as SCCM or
		MDT import jobs, Operating System, Driver bit type etc.
		
		Use : This script is provided as it and I accept no responsibility for any issues arising from its use.
 
		Twitter : @modaly_it
		Blog : http://deployeverything.com
 
		Credits
		MDT Import Script Source - https://scriptimus.wordpress.com/2012/06/18/mdt-powershell-importing-drivers/

		ChangeLog
		
		Version 1.0 Initial Release
		Version 1.1 Bug fix for change in Lenovo Web Content
		Version 1.2 Proxy settings added and bug fix for SCCM downloads. Added percentage and KB output 
					for downloads when SCCM/BOTH is selected.
		Version 1.3 Proxy setting sections updated, additional checks added.
		Version 1.4 Windows 7 Download Bug Fix.

#>


function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}

#endregion Source: Startup.pss

#region Source: MainForm.psf
function Show-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[ProgressBarOverlay] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms', 'System.Drawing') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
                public ProgressBarOverlay() : base() { SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true); }
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$RefreshModels = New-Object 'System.Windows.Forms.Button'
	$DeployEverythingcomLink = New-Object 'System.Windows.Forms.LinkLabel'
	$SCCMDellTabControl = New-Object 'System.Windows.Forms.TabControl'
	$SCCMTabPage1 = New-Object 'System.Windows.Forms.TabPage'
	$SiteCodeLabel = New-Object 'System.Windows.Forms.Label'
	$SiteCodeText = New-Object 'System.Windows.Forms.TextBox'
	$SiteServerLabel = New-Object 'System.Windows.Forms.Label'
	$SiteServerInput = New-Object 'System.Windows.Forms.TextBox'
	$ConnectSCCMButton = New-Object 'System.Windows.Forms.Button'
	$SCCMTabPage2 = New-Object 'System.Windows.Forms.TabPage'
	$UseProxyServerCheckbox = New-Object 'System.Windows.Forms.CheckBox'
	$ProxyPswdInput = New-Object 'System.Windows.Forms.TextBox'
	$labelPassword = New-Object 'System.Windows.Forms.Label'
	$ProxyUserInput = New-Object 'System.Windows.Forms.TextBox'
	$labelUsername = New-Object 'System.Windows.Forms.Label'
	$ProxyServerInput = New-Object 'System.Windows.Forms.TextBox'
	$labelProxyServer = New-Object 'System.Windows.Forms.Label'
	$labelPleaseNoteThisToolIs = New-Object 'System.Windows.Forms.Label'
	$ClearSelectionButton = New-Object 'System.Windows.Forms.Button'
	$ModelProgressOverlay = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$ProgressBar = New-Object 'System.Windows.Forms.ProgressBar'
	$ProgressListBox = New-Object 'System.Windows.Forms.ListBox'
	$AboutToolLabel = New-Object 'System.Windows.Forms.Label'
	$AutomationLabel = New-Object 'System.Windows.Forms.Label'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$ProductListBox = New-Object 'System.Windows.Forms.ListBox'
	$StartDownloadButton = New-Object 'System.Windows.Forms.Button'
	$DownloadGroupBox = New-Object 'System.Windows.Forms.GroupBox'
	$ArchitectureComboxBox = New-Object 'System.Windows.Forms.ComboBox'
	$DownloadComboBox = New-Object 'System.Windows.Forms.ComboBox'
	$PlatformComboBox = New-Object 'System.Windows.Forms.ComboBox'
	$PackagePathTextBox = New-Object 'System.Windows.Forms.TextBox'
	$RepositoryTextBox = New-Object 'System.Windows.Forms.TextBox'
	$ArchitectureCheckBox = New-Object 'System.Windows.Forms.Label'
	$lSelectDeployLabel = New-Object 'System.Windows.Forms.Label'
	$OSComboBox = New-Object 'System.Windows.Forms.ComboBox'
	$labelDownloadType = New-Object 'System.Windows.Forms.Label'
	$OperatingSysLabel = New-Object 'System.Windows.Forms.Label'
	$RepositoryLabel = New-Object 'System.Windows.Forms.Label'
	$PackagePathLabel = New-Object 'System.Windows.Forms.Label'
	$ModelListBox = New-Object 'System.Windows.Forms.Label'
	$ModelProgressLabel = New-Object 'System.Windows.Forms.Label'
	$LoggingLabel = New-Object 'System.Windows.Forms.Label'
	$OpenMDTFileDialog = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$MainForm_Load = {
		# Start Job Log Window
		$ProgressListBox.Items.Add("======== Initialising DeployEverything Lenovo Driver Automation Tool ======== ")
		$ProgressListBox.Items.Add(" ")
		
		# Create Log File	
		Get-Date -Format F | Out-File -FilePath $LogFile -Append
		Add-Content -Path $LogFile "Logging Running....."
		
		# Set SCCM Site Server To Local Machine
		$SiteServerInput.Text = $env:COMPUTERNAME
		$PlatformComboBox.SelectedItem = "SCCM"
		$DownloadComboBox.SelectedItem = "Drivers"
		$OSComboBox.SelectedItem = "Windows 10"
		$ArchitectureComboxBox.SelectedItem = "64 bit"
	}
	
	$StartDownloadButton_Click = {
		
		# Set Variables Retrieved From GUI
		$ImportInto = [string]$PlatformComboBox.SelectedItem
		$DownloadType = [string]$DownloadComboBox.SelectedItem
		$LenovoProducts = $ProductListBox.SelectedItems
		$SiteCode = $SiteCodeText.Text
		
		# Read in Lenovo Model Lists - For Downloading Driver's
		[xml]$LenovoModelXML = (New-Object System.Net.WebClient).DownloadString("$LenovoXMLSource")
		# Set XML Object
		$LenovoModelXML.GetType().FullName
		$LenovoModelDrivers = $LenovoModelXML.Products
		
		# Set Initial Validation State
		$ValidationErrors = 0
		
		# ============ Validation Selection Details and Prerequisites ==============
		
		# Reset Job Process Log Dialog 
		if (($ProgressListBox.ForeColor) -eq "Red") { $ProgressListBox.Items.Clear() }
		
		# Validate Selected Models
		if (($ProductListBox.SelectedItems.Count) -lt "1")
		{
			$ProgressListBox.ForeColor = "Red"
			$ProgressListBox.Items.Add("Error: No Models Selected")
			$ValidationErrors++
		}
		
		# Validate Repository Path For BIOS & Driver Downloads
		if ((Test-Path -Path $RepositoryTextBox.Text) -eq $true)
		{
			$RepositoryPath = [string]$RepositoryTextBox.Text
			$ProgressListBox.Items.Add("MDT: Respository Path Set To $RepositoryPath")
		}
		else
		{
			$ProgressListBox.ForeColor = "Red"
			$ProgressListBox.Items.Add("Error: UNC Repository Path Specified Could Not Be Found $($RepositoryTextBox.Text)")
			$ValidationErrors++
		}
		
		# Validate Package Path For SCCM Driver Imports
		if (($ImportInto) -ne "MDT")
		{
			if ((Test-Path -path $PackagePathTextBox.Text) -eq $true)
			{
				$PackagePath = [string]$PackagePathTextBox.Text
			}
			else
			{
				$ProgressListBox.ForeColor = "Red"
				$ProgressListBox.Items.Add("Error: UNC Package Path Specified Could Not Be Found $($PackagePathTextBox.Text)")
				$ValidationErrors++
			}
		}
		
		# Validate OS Selection
		if (($OSComboBox).SelectedIndex -ne $null)
		{
			$WindowsVersion = ([string]($OSComboBox).SelectedItem).Trim("Windows ")
		}
		else
		{
			$ProgressListBox.ForeColor = "Red"
			$ProgressListBox.Items.Add("Error: Operating System Not Specified")
			$ValidationErrors++
		}
		
		# Validate OS Architecture Selection
		if (($ArchitectureComboxBox).SelectedItem -ne $null)
		{
			$Architecture = "x" + ([string]$ArchitectureComboxBox.SelectedItem).Trim(" bit")
			if ($Architecture -ne "x64")
			{
				$Architecture = "x86"
			}
		}
		else
		{
			$ProgressListBox.ForeColor = "Red"
			$ProgressListBox.Items.Add("Error: Operating System Architecture Not Specified")
			$ValidationErrors++
		}
		
		# Validate PowerShell Commandlets / Install 
		if ((($ImportInto) -eq ("MDT" -or "Both")) -and ($ValidationErrors -eq 0))
		{
			# Validate MDT PS Commandlets
			if ((Test-Path -Path $MDTPSCommandlets) -eq $true)
			{
				# Import MDT Module
				$ProgressListBox.Items.Add("Importing: MDT PowerShell Commandlets")
				Import-Module $MDTPSCommandlets
			}
			else
			{
				$ProgressListBox.ForeColor = "Red"
				$ProgressListBox.Items.Add("Error: MDT PowerShell Commandlets file not found at $MDTPSCommandlets")
				$ValidationErrors++
			}
		}
		
		# Set Proxy Variables
		if ($UseProxyServerCheckbox.Checked -eq $true)
		{
			$ProxyUser = [string]$ProxyUserInput.Text
			$ProxyPswd = ConvertTo-SecureString $ProxyPswdInput.Text -AsPlainText -Force
			$ProxyServer = [string]$ProxyServerInput.Text
			$ProxyCred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ProxyUser, $ProxyPswd
			$ProgressListBox.Items.Add("PROXY: Downloading through proxy $ProxyServer ")
			$ProgressListBox.Items.Add(" ")
			$ProxyValidated = $true
			UpdateLogWindow	
		}
		
		
		# Download ScriptBlock
		$DriverDownloadJob = {
			Param ([string]$DriverRepositoryRoot,
				[string]$Model,
				[string]$LenovoDriverFileName,
				[string]$LenovoDriverURL,
				$ProxyServer,
				$ProxyCred)
			
			# Start Driver Download	
			if ($ProxyCred -gt $null)
			{
				Start-BitsTransfer -DisplayName "$Model-DriverDownload" -Source $LenovoDriverURL -Destination $($DriverRepositoryRoot + $Model + "\Driver Cab\" + $LenovoDriverFileName) -RetryTimeout 90 -RetryInterval 180 -Asynchronous -ProxyAuthentication NTLM -ProxyCredential $ProxyCred -ProxyUsage SystemDefault -Priority Foreground
			}
			else
			{
				Start-BitsTransfer -DisplayName "$Model-DriverDownload" -Source $LenovoDriverURL -Destination $($DriverRepositoryRoot + $Model + "\Driver Cab\" + $LenovoDriverFileName) -RetryTimeout 90 -RetryInterval 180 -Asynchronous
			}
	
		}
		
		# MDT Import SriptBlock
		$MDTImportJob = {
			Param ([string]$PSDriveName,
				[string]$MDTDriverPath,
				[string]$Make,
				[string]$Model,
				[string]$DriverRevision,
				[string]$OperatingSystemDir,
				[string]$DriverExtractDest,
				[string]$DeploymentShare)
			
			Import-Module "C:\Program Files\Microsoft Deployment Toolkit\bin\MicrosoftDeploymentToolkit.psd1"
			
			New-PSDrive -Name $PSDriveName -PSProvider MDTProvider -Root $DeploymentShare
			
			# =============== MDT Driver Import ====================
			
			Write-Host "Starting"
			Import-MDTDriver -path "$MDTDriverPath\$OperatingSystemDir\$Make\$Model\$DriverRevision" -SourcePath "$DriverExtractDest"
			Write-Host "Finished"
			
			
		}
		
		If ($ValidationErrors -eq 0)
		{
			# Test Package Path
			$ProgressListBox.Items.Clear()
			$ProgressListBox.ForeColor = "Black"
			$ProgressListBox.Items.Add("======== Starting Download Processes ======== ")
			$ProgressListBox.Items.Add(" ")
			$ProgressListBox.Items.Add("Models selected: $($ProductListBox.SelectedItems)")
			$ProgressListBox.Items.Add("Operating System specified: Windows $($WindowsVersion)")
			$ProgressListBox.Items.Add("Operating System architecture specified: $($Architecture)")
			$ProgressListBox.Items.Add(" ")
			$ProgressListBox.Items.Add("Site Code specified: $($SiteCode)")
			$ProgressListBox.Items.Add("Respository Path specified: $($RepositoryPath)")
			$ProgressListBox.Items.Add("Package Path specified: $($PackagePath)")
			
			# Operating System Version
			$OperatingSystem = ("Windows " + $WindowsVersion)
			$TotalModelCount = $LenovoProducts.Count
			$RemainingModels = $TotalModelCount
			
			# Initialise Job Progress Bar
			$ProgressBar.Maximum = $TotalModelCount
			$ModelProgressOverlay.Maximum = $TotalModelCount
			
			if ($ImportInto -ne "SCCM")
			{
				# Import MDT Module
				$ProgressListBox.Items.Add("IMPORT: Importing MDT PowerShell Module")
				Import-Module "C:\Program Files\Microsoft Deployment Toolkit\bin\MicrosoftDeploymentToolkit.psd1"
			}
			
			foreach ($Model in $LenovoProducts)
			{
				$Make = "Lenovo"
				$Model = [string]$Model.Trim()
				$ProgressListBox.Items.Add("Processing Lenovo Model: $Model")
				$ProgressListBox.Items.Add(" ")
				$LenovoDriver = (($LenovoModelDrivers.Product | Where-Object { $_.model -eq $Model }).driverPack | Where-Object { $_.id -eq "SCCM" })."#text"
				$ProgressListBox.Items.Add("DEBUG Model $Model WindowsVersion $WindowsVersion Architecture $($ArchitectureComboxBox.text)")
				
				If ($WindowsVersion -ne "7")
				{
					$LenovoDriverURL = (($LenovoModelDrivers.Product | Where-Object { ($_.model -eq "$Model") -and ($_.os -eq "win$(($WindowsVersion).Trim("."))") }).driverPack | Where-Object { $_.id -eq "SCCM" })."#text" | Select -First 1
				}
				else
				{
					$LenovoDriverURL = (($LenovoModelDrivers.Product | Where-Object { ($_.model -eq "$Model") -and ($_.os -eq "win$WindowsVersion$(($ArchitectureComboxBox.Text).Split(' ')[0])")}).driverPack | Where-Object { $_.id -eq "SCCM" })."#text" | Select -First 1
				}
				$ProgressListBox.Items.Add("Lenovo Driver URL $LenovoDriverURL")
			$LenovoDriverURL = FindDriver $LenovoDriverURL $Architecture $ProxyServer $ProxyCred
			
			if ($LenovoDriverURL -ne "badLink")
			{
				$LenovoDriverFileName = $LenovoDriverURL | Split-Path -Leaf
				$DriverRevision = ($LenovoDriverFileName.Split("_") | Select -Last 1).Trim(".exe")
				$ProgressListBox.Items.Add(" ")
				$ProgressListBox.Items.Add("Starting download,extract and import process for Lenovo model $($Model)")
				
				# Correct slash direction issues
				$Model = $Model.Replace("/", "-")
				
				# =================== DEFINE VARIABLES =====================
				
				# Directory used for driver and BIOS downloads
				$DriverRepositoryRoot = ($RepositoryPath.Trimend("\") + "\Lenovo\")
				
				# Directory used by SCCM for driver packages
				If ($ImportInto -ne "MDT") { $DriverPackageRoot = ($PackagePath.Trimend("\") + "\Lenovo\") }
				
				# Driver variables & switches
				$DriverCategoryName = $Make + "," + $Model + "," + $OperatingSystem + "," + $DriverRevision
				$DriverExtractDest = ($DriverRepositoryRoot + $Model + "\" + "$DriverRevision-Windows$WindowsVersion-$Architecture")
					$DriverPackageDest = $DriverPackageRoot + "$Model"
					$DriverSilentSwitches = "/VERYSILENT /DIR=$DriverExtractDest /Extract=Yes"
					
					# =================== INITIATE DOWNLOADS ===================
					
					if (($ImportInto -eq "SCCM") -or ($ImportInto -eq "Both"))
					{
						
						if ($DownloadType -eq "Drivers")
						{
							# =============== SCCM Driver Cab Download =================
							
							$ProgressListBox.Items.Add(" ")
							$ProgressListBox.Items.Add("Retrieving SCCM Driver Pack Site For Model: $Model")
							$ProgressListBox.Items.Add("URL Found: $LenovoDriverURL")
							UpdateLogWindow
							
							If ($LenovoDriverURL -ne $null)
							{
								
								# Check for destination directory, create if required and download the driver cab
								if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\Driver Cab\" + $LenovoDriverFileName)) -eq $false)
								{
									$ProgressListBox.Items.Add("SCCM: Creating $Make $Model download folder")
									if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\Driver Cab")) -eq $false)
									{
										New-Item -Type dir -Path ($DriverRepositoryRoot + $Model + "\Driver Cab")
									}
									$ProgressListBox.Items.Add("SCCM: Downloading $LenovoDriverFileName driver cab file")
									UpdateLogWindow
									
									#Download Driver Package File
									$ProgressListBox.Items.Add("SCCM: Driver Package Download Location Set To: $($DriverRepositoryRoot + $Model + '\Driver Cab\' + $LenovoDriverFileName)")
									$ProgressListBox.Items.Add("SCCM: Downloading Driver From: $LenovoDriverURL")
									Start-Job -Name "$Model-DriverDownload" -ScriptBlock $DriverDownloadJob -ArgumentList ($DriverRepositoryRoot, $Model, $LenovoDriverFileName, $LenovoDriverURL, $ProxyServer, $ProxyCred)
									sleep -Seconds 5
									$BitsJob = Get-BitsTransfer | Where-Object { $_.DisplayName -eq "$Model-DriverDownload" }
									while (($BitsJob).JobState -eq "Connecting")
									{
										$ProgressListBox.Items.Add("SCCM: Establishing Connection to $LenovoDriverURL...")
										sleep -seconds 30
										UpdateLogWindow
									}								
									while (($BitsJob).JobState -eq "Transferring")
									{
										$PercentComplete = [int](($BitsJob.BytesTransferred * 100)/$BitsJob.BytesTotal);
										$ProgressListBox.Items.Add("SCCM: Downloaded $([int]((($BitsJob).BytesTransferred)/1024)) kB of $([int]((($BitsJob).BytesTotal)/1024)) kB ($PercentComplete%). Next update in 60 seconds..")
										sleep -seconds 30
										UpdateLogWindow
									}
									Get-BitsTransfer | Where-Object { $_.DisplayName -eq "$Model-DriverDownload" } | Complete-BitsTransfer
									$ProgressListBox.Items.Add("SCCM: Driver Revision: $DriverRevision")
								}
								else
								{
									$ProgressListBox.Items.Add("SCCM: Skipping $SCCMDriverCab... Driver pack already downloaded...")
								}
								
								# =============== Create Driver Package + Import Drivers =================
								
								#$ProgressListBox.Items.Add("DEBUG Driver Package Location: $DriverCabDest")
								if ((Test-Path -Path $DriverPackageDest) -eq $false)
								{
									New-Item -Type dir -Path ($DriverPackageDest + "\" + $Architecture)
									Set-Location -Path ($SiteCode + ":")
									$CMDDriverPackage = ($Make + " " + $Model + " - " + $OperatingSystem + " " + $Architecture)
									$ProgressListBox.Items.Add("SCCM: Creating driver package")
									UpdateLogWindow
									Set-Location -Path $env:SystemDrive
									$ProgressListBox.Items.Add("SCCM: Expanding driver CAB")
									UpdateLogWindow
									
									# Extract Drivers From Driver
									if ((Test-Path -Path $DriverExtractDest) -eq $false)
									{
										New-Item -Type dir -Path $DriverExtractDest
										$ProgressListBox.Items.Add("SCCM: Running Driver: $($DriverRepositoryRoot + $Model + "\Driver Cab\" + $LenovoDriverFileName)")
										$ProgressListBox.Items.Add("SCCM: Driver Extracting To: $DriverExtractDest")
										Start-Process -FilePath $($DriverRepositoryRoot + $Model + "\Driver Cab\" + $LenovoDriverFileName) -ArgumentList $DriverSilentSwitches -Verb RunAs
										
										$DriverProcess = $LenovoDriverFileName.TrimEnd(".exe")
										
										$ProgressListBox.Items.Add(" ")
										$ProgressListBox.Items.Add("==================== SCCM DRIVER EXTRACT ====================")
										$ProgressListBox.Items.Add(" ")
										
										# Wait for Lenovo Driver Process To Finish
										While (Get-Process -Name $DriverProcess)
										{
											$ProgressListBox.Items.Add("SCCM: Waiting For Extract Process To Complete..  Next Check In 60 Seconds")
											UpdateLogWindow
											sleep -seconds 30
										}
										
										UpdateLogWindow
									}
									else
									{
										$ProgressListBox.Items.Add("Skipping $LenovoDriverFileName.. Drivers already extracted...")
									}
									
									$DriverINFFiles = Get-ChildItem -Path $DriverExtractDest -Recurse -Filter "*.inf" | Where-Object { $_.FullName -like "*$Architecture*" }
									
									Set-Location -Path ($SiteCode + ":")
									if (Get-CMCategory -CategoryType DriverCategories -name $DriverCategoryName)
									{
										$ProgressListBox.Items.Add("SCCM: Category Already Exists")
										$DriverCategory = Get-CMCategory -CategoryType DriverCategories -name $DriverCategoryName
									}
									else
									{
										$ProgressListBox.Items.Add("SCCM: Creating Category")
										$DriverCategory = New-CMCategory -CategoryType DriverCategories -name $DriverCategoryName
									}
									
									$ProgressListBox.Items.Add("SCCM: Creating Driver Package for $Make $Model")
									$ProgressListBox.Items.Add(" ")
									$ProgressListBox.Items.Add("======== Adding Drivers To Package ======== ")
									$ProgressListBox.Items.Add(" ")
									UpdateLogWindow
									
									New-CMDriverPackage -Name $CMDDriverPackage -path ($DriverPackageDest + "\" + $Architecture)
									Set-CMDriverPackage -Name $CMDDriverPackage -Version $DriverRevision
									$DriverPackage = Get-CMDriverPackage -Name $CMDDriverPackage
									
									# Import Driver Loop
									$DriverNo = 1
									foreach ($DriverINF in $DriverINFFiles)
									{
										$DriverInfo = Import-CMDriver -UncFileLocation ($DriverINF.FullName) -ImportDuplicateDriverOption AppendCategory -EnableAndAllowInstall $True -AdministrativeCategory $DriverCategory | Select-Object *
										Add-CMDriverToDriverPackage -DriverID $DriverInfo.CI_ID -DriverPackageName "$($CMDDriverPackage)" -WarningAction SilentlyContinue -ErrorAction SilentlyContinue
										$ProgressListBox.Items.Add("SCCM: Importing Driver INF $DriverNo Of $($DriverINFFiles.count): $($DriverINF.FullName | Split-Path -Leaf)")
										$DriverNo++
										UpdateLogWindow
									}
								}
								else
								{
									$ProgressListBox.Items.Add("SCCM: Driver Package Already Exists.. Skipping")
								}
								Set-Location -Path $env:SystemDrive
							}
							else
							{
								$ProgressListBox.Items.Add("Operating system driver package download path not found.. Skipping $Model")
							}
						}
					}
					
					if (($ImportInto -eq "Both") -or ($ImportInto -eq "MDT"))
					{
						
						# =================== MDT Driver Download =====================
						
						$ProgressListBox.Items.Add(" ")
						$ProgressListBox.Items.Add("==================== MDT Driver Download ====================")
						$ProgressListBox.Items.Add(" ")
						$ProgressListBox.Items.Add("Starting MDT Driver Download Process")
						UpdateLogWindow
						
						# =================== DEFINE VARIABLES =====================
						
						# Directory used for driver downloads
						$DriverRepositoryRoot = ($RepositoryPath.Trimend("\") + "\Lenovo\")
						$ProgressListBox.Items.Add("MDT: Driver Package Base Location Set To: $DriverRepositoryRoot")
						
						# Operating System Version
						$OperatingSystem = ("Windows " + $WindowsVersion)
						UpdateLogWindow
						
						# =============== MDT Driver Cab Download =================
						
						$ProgressListBox.Items.Add(" ")
						UpdateLogWindow
						
						If ($LenovoDriverURL -ne $LenovoBaseURL)
						{
							
							# Check for destination directory, create if required and download the driver cab
							if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\Driver Cab\" + $LenovoDriverFileName)) -eq $false)
							{
								if ((Test-Path -Path ($DriverRepositoryRoot + $Model + "\Driver Cab\")) -eq $false)
								{
									$ProgressListBox.Items.Add("Creating $Make $Model Download Folder")
									New-Item -Type dir -Path ($DriverRepositoryRoot + $Model + "\Driver Cab")
								}
								else
								{
									# Remove previous driver cab revisions
									Get-ChildItem -Path ($DriverRepositoryRoot + $Model + "\Driver Cab\") | Remove-Item
								}
								
								# Download Driver Package File
								$ProgressListBox.Items.Add("MDT: Driver Package Download Location Set To: $($DriverRepositoryRoot + $Model + '\Driver Cab\' + $LenovoDriverFileName)")
								$ProgressListBox.Items.Add("MDT: Downloading Driver From: $LenovoDriverURL")
								
								Start-Job -Name "$Model-DriverDownload" -ScriptBlock $DriverDownloadJob -ArgumentList ($DriverRepositoryRoot, $Model, $LenovoDriverFileName, $LenovoDriverURL, $ProxyServer, $ProxyCred)
								sleep -Seconds 5
								$BitsJob = Get-BitsTransfer | Where-Object { $_.DisplayName -eq "$Model-DriverDownload" }
								while (($BitsJob).JobState -eq "Connecting")
								{
									$ProgressListBox.Items.Add("MDT: Establishing Connection to $LenovoDriverURL...")
									sleep -seconds 30
									UpdateLogWindow
								}
								while (($BitsJob).JobState -eq "Transferring")
								{
									$PercentComplete = [int](($BitsJob.BytesTransferred * 100)/$BitsJob.BytesTotal);
									$ProgressListBox.Items.Add("MDT: Downloaded $([int]((($BitsJob).BytesTransferred)/1024)) kB of $([int]((($BitsJob).BytesTotal)/1024)) kB ($PercentComplete%). Next update in 60 seconds..")
									sleep -seconds 30
									UpdateLogWindow
								}
								Get-BitsTransfer | Where-Object { $_.DisplayName -eq "$Model-DriverDownload" } | Complete-BitsTransfer
								
							}
							else
							{
								$ProgressListBox.Items.Add("Skipping $LenovoDriverFileName.. Driver pack already downloaded...")
							}
							
							$ProgressListBox.Items.Add("MDT: Driver Revision: $DriverRevision")
							
							# Extract Drivers From Driver
							if ((Test-Path -Path $DriverExtractDest) -eq $false)
							{
								New-Item -Type dir -Path $DriverExtractDest
								$ProgressListBox.Items.Add("MDT: Running Driver: $($DriverRepositoryRoot + $Model + "\Driver Cab\" + $LenovoDriverFileName)")
								$ProgressListBox.Items.Add("MDT: Driver Extracting To: $DriverExtractDest")
								Start-Process -FilePath $($DriverRepositoryRoot + $Model + "\Driver Cab\" + $LenovoDriverFileName) -ArgumentList $DriverSilentSwitches -Verb RunAs
								
								$DriverProcess = $LenovoDriverFileName.TrimEnd(".exe")
								
								$ProgressListBox.Items.Add(" ")
								$ProgressListBox.Items.Add("==================== MDT DRIVER EXTRACT ====================")
								$ProgressListBox.Items.Add(" ")
								UpdateLogWindow
								
								# Wait for Lenovo Driver Process To Finish
								While (Get-Process -Name $DriverProcess)
								{
									$ProgressListBox.Items.Add("MDT: Waiting For Extract Process To Complete..  Next Check In 30 Seconds")
									UpdateLogWindow
									sleep -Seconds 30
								}
							}
							else
							{
								$ProgressListBox.Items.Add("Skipping $LenovoDriverFileName.. Drivers already extracted...")
								UpdateLogWindow
							}
							
							
							# =============== MDT Driver Import ====================
							
							
							$ProgressListBox.Items.Add(" ")
							$ProgressListBox.Items.Add("==================== MDT Driver Import ====================")
							$ProgressListBox.Items.Add(" ")
							$ProgressListBox.Items.Add("Starting $Model MDT Driver Import Process")
							UpdateLogWindow
							
							# Detect First MDT PSDrive
							$ProgressListBox.Items.Add("MDT: Detecting MDT PSDrive")
							If (!$PSDriveName) { $PSDriveName = (Get-MDTPersistentDrive)[0].name }
							
							# Detect First MDT Deployment Share
							$ProgressListBox.Items.Add("MDT: Detecting MDT Deployment Share")
							If (!$DeploymentShare) { $DeploymentShare = (Get-MDTPersistentDrive)[0].path }
							
							$MDTDriverPath = $PSDriveName + ':\Out-of-Box Drivers'
							$MDTSelectionProfilePath = $PSDriveName + ':\Selection Profiles'
							
							# Connect to Deployment Share
							$ProgressListBox.Items.Add("MDT: Connecting to MDT Share")
							If (!(Get-PSDrive -Name $PSDriveName -ErrorAction SilentlyContinue))
							{
								New-PSDrive -Name $PSDriveName -PSProvider MDTProvider -Root $DeploymentShare
							}
							
							$DSDriverPath = $PSDriveName + ':\Out-of-Box Drivers'
							$DSSelectionProfilePath = $PSDriveName + ':\Selection Profiles'
							
							# Connect to Deployment Share
							If ((Get-PSDrive -Name $PSDriveName -ErrorAction SilentlyContinue) -eq $false)
							{
								New-PSDrive -Name $PSDriveName -PSProvider MDTProvider -Root $DeploymentShare
							}
							
							# =============== MDT Driver Import ====================
							
							$OperatingSystemDir = ($OperatingSystem + " " + $Architecture)
							
							if ((Test-Path $MDTDriverPath\$OperatingSystemDir) -eq $false)
							{
								New-Item -path $MDTDriverPath -enable "True" -Name $OperatingSystemDir -ItemType "folder"
							}
							
							if ((Test-Path $MDTSelectionProfilePath"\Drivers - "$OperatingSystemDir) -eq $false)
							{
								New-Item -path $MDTSelectionProfilePath -enable "True" -Name "Drivers - $OperatingSystemDir" -Definition "<SelectionProfile><Include path=`"Out-of-Box Drivers\$OS`" /></SelectionProfile>" -ReadOnly "False" -Verbose
							}
							if ((Test-Path $MDTDriverPath\$OperatingSystemDir\$Make) -eq $false)
							{
								New-Item -path $MDTDriverPath\$OperatingSystemDir -enable "True" -Name $Make -ItemType "folder"
							}
							if ((Test-Path $MDTDriverPath\$OperatingSystemDir\$Make\$Model) -eq $false)
							{
								New-Item -path $MDTDriverPath\$OperatingSystemDir\$Make -enable "True" -Name $Model -ItemType "folder"
							}
							if ((Test-Path $MDTDriverPath\$OperatingSystemDir\$Make\$Model\$DriverRevision) -eq $false)
							{
								New-Item -path $MDTDriverPath\$OperatingSystemDir\$Make\$Model -enable "True" -Name $DriverRevision -ItemType "folder"
								$ProgressListBox.Items.Add("MDT: Importing MDT driver pack for $Make $Model - Revision $DriverRevision")
								$ProgressListBox.Items.Add("MDT: MDT Driver Path = $MDTDriverPath\$OperatingSystemDir\$Make\$Model\$DriverRevision")
								$ProgressListBox.Items.Add(" ")
								Start-Job -Name "$Model-MDTImport" -ScriptBlock $MDTImportJob -ArgumentList ($PSDriveName, $MDTDriverPath, $Make, $Model, $DriverRevision, $OperatingSystemDir, $DriverExtractDest, $DeploymentShare)
								while ((Get-Job -Name "$Model-MDTImport").State -eq "Running")
								{
									$ProgressListBox.Items.Add("MDT: Waiting For Import Process To Finish For $Make $Model $OperatingSystem $Architecture.. Next Check In 60 Seconds")
									UpdateLogWindow
									sleep -seconds 30
								}
								Get-Job -Name "$Model-MDTImport" | Remove-Job
							}
							else
							{
								$ProgressListBox.Items.Add("MDT driver pack already exists.. Skipping..")
							}
						}
						
						
					}
					
				}
				else
				{
					$ProgressListBox.Items.Add("ERROR: Could not obtain $Model link page.. Skipping..")
				}
				$ProgressBar.Increment(1)
				$ModelProgressOverlay.Increment(1)
				$RemainingModels--
				UpdateLogWindow
			}
			$ProgressBar.Increment(1)
			$ModelProgressOverlay.Increment(1)
			$ProgressListBox.Items.Add(" ")
			$ProgressListBox.Items.Add("======== Finished Processing ======== ")
			$ProgressListBox.Items.Add(" ")
			UpdateLogWindow
		}
		#Output Log File
		$ProgressListBox.Items | Out-File -FilePath $LogFile -Append
	}
	
	$ConnectSCCMButton_Click = {
		
		$SiteServer = [string]$SiteServerInput.Text
		$ProgressListBox.ForeColor = "Black"
		$ProgressListBox.Items.Clear()
		$ProgressListBox.Items.Add("======== Validating SCCM Server Details ======== ")
		$ProgressListBox.Items.Add(" ")
		If ((Test-WSMan -ComputerName $SiteServer).wsmid -ne $null)
		{
			Clear-Host
			$ProgressListBox.Items.Add("Connected To Site Server: $SiteServer ")
			$ProgressListBox.Items.Add(" ")
			$ProgressListBox.ForeColor = "Black"
			$ProgressListBox.Items.Add("======== Checking SCCM Prerequisites ======== ")
			$ProgressListBox.Items.Add(" ")
			
			# Import SCCM PowerShell Module
			$ModuleName = (get-item $env:SMS_ADMIN_UI_PATH).parent.FullName + "\ConfigurationManager.psd1"
			If ($ModuleName -ne $null)
			{
				$ProgressListBox.Items.Add("Loading SCCM PowerShell Module")
				Import-Module $ModuleName
				$ProgressListBox.Items.Add(" ")
				$ProgressListBox.Items.Add("======== Connecting to SCCM Server ======== ")
				$ProgressListBox.Items.Add(" ")
				$ProgressListBox.Items.Add("Querying Site Code From $SiteServer")
				QuerySiteCode ($SiteServer)
				$SiteCode = $SiteCodeLabel.Text
				$ProgressListBox.Items.Add("$SiteCodeReturned")
				#$SiteCodeText.Text = $SiteCode
				# Process if site code is valid
				if ($SiteCode -ne $null)
				{
					# Add model to ArrayList if not present
					if ($LenovoModels -ne $null)
					{
						foreach ($Model in $LenovoModels)
						{
							if ($Model -notin $LenovoProducts)
							{
								$LenovoProducts.Add($Model.Model) | Out-Null
								$ProductListBox.Items.Add($Model)
							}
						}
						$StartDownloadButton.Enabled = $true
					}
				}
			}
			else
			{
				$ProgressListBox.ForeColor = "Red"
				$ProgressListBox.Items.Add("Error: SCCM PowerShell Module Not Found")
			}
		}
		else
		{
			$ProgressListBox.ForeColor = "Red"
			$ProgressListBox.Items.Add("Error: SCCM Server Specified Not Found - $($SiteServerInput.Text)")
		}
		
		
		#Output Log File
		$ProgressListBox.Items | Out-File -FilePath $env:TEMP\DeployEverythingLenovoTool.txt -Append
	}
	
	
	$PlatformComboBox_SelectedValueChanged = {
		
		If (($PlatformComboBox.SelectedItem) -eq "MDT")
		{
			$DownloadComboBox.Text = "Drivers"
			$DownloadComboBox.Enabled = $false
			$PackagePathTextBox.Enabled = $false
			$SiteCodeText.Enabled = $false
			$SiteServerInput.Enabled = $false
			$ConnectSCCMButton.Enabled = $false
		}
		If (($PlatformComboBox.SelectedItem) -ne "MDT")
		{
			$DownloadComboBox.Enabled = $true
			$PackagePathTextBox.Enabled = $true
			$SiteCodeText.Enabled = $true
			$SiteServerInput.Enabled = $true
			$ConnectSCCMButton.Enabled = $true
		}
	}
	
	$ClearSelectionButton_Click = {
		#Reset's Windows Form
		$ProgressListBox.ForeColor = "Black"
		$ProductListBox.Items.Clear()
		$ProgressListBox.Items.Clear()
		$SiteServerInput.Text = $null
		$SiteServerInput.Enabled = $true
		$SiteCodeText = $null
		$PlatformComboBox.SelectedItem = $null
		$PlatformComboBox.Enabled = $true
		$DownloadComboBox.SelectedItem = $null
		$DownloadComboBox.Enabled = $true
		$OSComboBox.SelectedItem = $null
		$OSComboBox.Enabled = $true
		$ArchitectureComboxBox.SelectedItem = $null
		$ArchitectureComboxBox.Enabled = $true
		$RepositoryTextBox.Text = $null
		$PackagePathTextBox.Text = $null
		$PackagePathTextBox.Enabled = $true
		$StartDownloadButton.Enabled = $false
		$MDTPathLabel.Text = $null
		
	}
	
	$AddToListlButton_Click = {
		$ProductListBox.Items.Add($LenovoModelListComboBox.Text)
	}
	
	
	$OSComboBox_SelectedIndexChanged = {
		If (($OSComboBox.Text) -ne "Windows 7")
		{
			$ArchitectureComboxBox.Text = "64 Bit"
			$ArchitectureComboxBox.Enabled = $false
		}
		else
		{
			$ArchitectureComboxBox.Enabled = $true
		}
		UpdateModeList
	}
	
	$ArchitectureComboxBox_SelectedIndexChanged = {
		UpdateModeList
	}
	
	$button1_Click = {
		$ProductListBox.Items | Out-File C:\Test.txt -Append
	}
	
	
	$DeployEverythingcomLink_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
		Start-Process -FilePath "http://www.deployeverything.com"
	}
	
	$UseProxyServerCheckbox_CheckedChanged = {
		if ($UseProxyServerCheckbox.Checked -eq $true)
		{
			$ProxyPswdInput.Enabled = $true
			$ProxyUserInput.Enabled = $true
			$ProxyServerInput.Enabled = $true
		}
		else
		{
			$ProxyPswdInput.Enabled = $false
			$ProxyUserInput.Enabled = $false
			$ProxyServerInput.Enabled = $false
		}
	}
	
	$RefreshModels_Click = {
		UpdateModeList
		
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_SiteCodeText = $SiteCodeText.Text
		$script:MainForm_SiteServerInput = $SiteServerInput.Text
		$script:MainForm_UseProxyServerCheckbox = $UseProxyServerCheckbox.Checked
		$script:MainForm_ProxyPswdInput = $ProxyPswdInput.Text
		$script:MainForm_ProxyUserInput = $ProxyUserInput.Text
		$script:MainForm_ProxyServerInput = $ProxyServerInput.Text
		$script:MainForm_ProgressListBox = $ProgressListBox.SelectedItems
		$script:MainForm_ProductListBox = $ProductListBox.SelectedItems
		$script:MainForm_ArchitectureComboxBox = $ArchitectureComboxBox.Text
		$script:MainForm_ArchitectureComboxBox_SelectedItem = $ArchitectureComboxBox.SelectedItem
		$script:MainForm_DownloadComboBox = $DownloadComboBox.Text
		$script:MainForm_DownloadComboBox_SelectedItem = $DownloadComboBox.SelectedItem
		$script:MainForm_PlatformComboBox = $PlatformComboBox.Text
		$script:MainForm_PlatformComboBox_SelectedItem = $PlatformComboBox.SelectedItem
		$script:MainForm_PackagePathTextBox = $PackagePathTextBox.Text
		$script:MainForm_RepositoryTextBox = $RepositoryTextBox.Text
		$script:MainForm_OSComboBox = $OSComboBox.Text
		$script:MainForm_OSComboBox_SelectedItem = $OSComboBox.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$RefreshModels.remove_Click($RefreshModels_Click)
			$DeployEverythingcomLink.remove_LinkClicked($DeployEverythingcomLink_LinkClicked)
			$ConnectSCCMButton.remove_Click($ConnectSCCMButton_Click)
			$UseProxyServerCheckbox.remove_CheckedChanged($UseProxyServerCheckbox_CheckedChanged)
			$ClearSelectionButton.remove_Click($ClearSelectionButton_Click)
			$StartDownloadButton.remove_Click($StartDownloadButton_Click)
			$ArchitectureComboxBox.remove_SelectedIndexChanged($ArchitectureComboxBox_SelectedIndexChanged)
			$PlatformComboBox.remove_SelectedValueChanged($PlatformComboBox_SelectedValueChanged)
			$OSComboBox.remove_SelectedIndexChanged($OSComboBox_SelectedIndexChanged)
			$MainForm.remove_Load($MainForm_Load)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$SCCMDellTabControl.SuspendLayout()
	$SCCMTabPage1.SuspendLayout()
	$SCCMTabPage2.SuspendLayout()
	$DownloadGroupBox.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($RefreshModels)
	$MainForm.Controls.Add($DeployEverythingcomLink)
	$MainForm.Controls.Add($SCCMDellTabControl)
	$MainForm.Controls.Add($labelPleaseNoteThisToolIs)
	$MainForm.Controls.Add($ClearSelectionButton)
	$MainForm.Controls.Add($ModelProgressOverlay)
	$MainForm.Controls.Add($ProgressBar)
	$MainForm.Controls.Add($ProgressListBox)
	$MainForm.Controls.Add($AboutToolLabel)
	$MainForm.Controls.Add($AutomationLabel)
	$MainForm.Controls.Add($picturebox1)
	$MainForm.Controls.Add($ProductListBox)
	$MainForm.Controls.Add($StartDownloadButton)
	$MainForm.Controls.Add($DownloadGroupBox)
	$MainForm.Controls.Add($ModelListBox)
	$MainForm.Controls.Add($ModelProgressLabel)
	$MainForm.Controls.Add($LoggingLabel)
	$MainForm.AutoScaleDimensions = '7, 13'
	$MainForm.AutoScaleMode = 'Font'
	$MainForm.BackColor = 'White'
	$MainForm.ClientSize = '981, 653'
	$MainForm.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$MainForm.FormBorderStyle = 'FixedSingle'
	$MainForm.Margin = '5, 4, 5, 4'
	$MainForm.MaximizeBox = $False
	$MainForm.MinimizeBox = $False
	$MainForm.Name = 'MainForm'
	$MainForm.SizeGripStyle = 'Hide'
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = 'DeployEverything.com - Lenovo Driver Download Automation Tool v1.4'
	$MainForm.add_Load($MainForm_Load)
	#
	# RefreshModels
	#
	$RefreshModels.BackColor = 'SteelBlue'
	$RefreshModels.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$RefreshModels.ForeColor = 'White'
	$RefreshModels.Location = '28, 369'
	$RefreshModels.Margin = '4, 3, 4, 3'
	$RefreshModels.Name = 'RefreshModels'
	$RefreshModels.Size = '276, 23'
	$RefreshModels.TabIndex = 38
	$RefreshModels.Text = 'Refresh Models'
	$RefreshModels.UseVisualStyleBackColor = $False
	$RefreshModels.add_Click($RefreshModels_Click)
	#
	# DeployEverythingcomLink
	#
	$DeployEverythingcomLink.ActiveLinkColor = 'SteelBlue'
	$DeployEverythingcomLink.Font = 'Microsoft Sans Serif, 10pt, style=Bold'
	$DeployEverythingcomLink.LinkColor = 'DarkGreen'
	$DeployEverythingcomLink.Location = '766, 624'
	$DeployEverythingcomLink.Margin = '4, 0, 4, 0'
	$DeployEverythingcomLink.Name = 'DeployEverythingcomLink'
	$DeployEverythingcomLink.Size = '202, 30'
	$DeployEverythingcomLink.TabIndex = 37
	$DeployEverythingcomLink.TabStop = $True
	$DeployEverythingcomLink.Text = 'DeployEverything.com'
	$DeployEverythingcomLink.add_LinkClicked($DeployEverythingcomLink_LinkClicked)
	#
	# SCCMDellTabControl
	#
	$SCCMDellTabControl.Controls.Add($SCCMTabPage1)
	$SCCMDellTabControl.Controls.Add($SCCMTabPage2)
	$SCCMDellTabControl.Location = '28, 101'
	$SCCMDellTabControl.Margin = '4, 3, 4, 3'
	$SCCMDellTabControl.Name = 'SCCMDellTabControl'
	$SCCMDellTabControl.SelectedIndex = 0
	$SCCMDellTabControl.Size = '934, 91'
	$SCCMDellTabControl.TabIndex = 0
	#
	# SCCMTabPage1
	#
	$SCCMTabPage1.Controls.Add($SiteCodeLabel)
	$SCCMTabPage1.Controls.Add($SiteCodeText)
	$SCCMTabPage1.Controls.Add($SiteServerLabel)
	$SCCMTabPage1.Controls.Add($SiteServerInput)
	$SCCMTabPage1.Controls.Add($ConnectSCCMButton)
	$SCCMTabPage1.BackColor = 'WhiteSmoke'
	$SCCMTabPage1.ForeColor = 'SteelBlue'
	$SCCMTabPage1.Location = '4, 22'
	$SCCMTabPage1.Margin = '4, 3, 4, 3'
	$SCCMTabPage1.Name = 'SCCMTabPage1'
	$SCCMTabPage1.Padding = '4, 3, 4, 3'
	$SCCMTabPage1.Size = '926, 65'
	$SCCMTabPage1.TabIndex = 0
	$SCCMTabPage1.Text = 'SCCM Site Details'
	#
	# SiteCodeLabel
	#
	$SiteCodeLabel.AutoSize = $True
	$SiteCodeLabel.BackColor = 'WhiteSmoke'
	$SiteCodeLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$SiteCodeLabel.Location = '266, 22'
	$SiteCodeLabel.Margin = '4, 0, 4, 0'
	$SiteCodeLabel.Name = 'SiteCodeLabel'
	$SiteCodeLabel.Size = '62, 13'
	$SiteCodeLabel.TabIndex = 11
	$SiteCodeLabel.Text = 'Site Code'
	#
	# SiteCodeText
	#
	$SiteCodeText.CharacterCasing = 'Upper'
	$SiteCodeText.Enabled = $False
	$SiteCodeText.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$SiteCodeText.ForeColor = 'SteelBlue'
	$SiteCodeText.Location = '352, 19'
	$SiteCodeText.Margin = '4, 3, 4, 3'
	$SiteCodeText.Name = 'SiteCodeText'
	$SiteCodeText.Size = '64, 20'
	$SiteCodeText.TabIndex = 10
	#
	# SiteServerLabel
	#
	$SiteServerLabel.AutoSize = $True
	$SiteServerLabel.BackColor = 'WhiteSmoke'
	$SiteServerLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$SiteServerLabel.Location = '8, 22'
	$SiteServerLabel.Margin = '4, 0, 4, 0'
	$SiteServerLabel.Name = 'SiteServerLabel'
	$SiteServerLabel.Size = '70, 13'
	$SiteServerLabel.TabIndex = 9
	$SiteServerLabel.Text = 'Site Server'
	#
	# SiteServerInput
	#
	$SiteServerInput.CharacterCasing = 'Upper'
	$SiteServerInput.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$SiteServerInput.ForeColor = 'SteelBlue'
	$SiteServerInput.Location = '105, 19'
	$SiteServerInput.Margin = '4, 3, 4, 3'
	$SiteServerInput.Name = 'SiteServerInput'
	$SiteServerInput.Size = '150, 20'
	$SiteServerInput.TabIndex = 8
	#
	# ConnectSCCMButton
	#
	$ConnectSCCMButton.BackColor = 'SteelBlue'
	$ConnectSCCMButton.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ConnectSCCMButton.ForeColor = 'White'
	$ConnectSCCMButton.Location = '438, 19'
	$ConnectSCCMButton.Margin = '4, 3, 4, 3'
	$ConnectSCCMButton.Name = 'ConnectSCCMButton'
	$ConnectSCCMButton.Size = '157, 23'
	$ConnectSCCMButton.TabIndex = 5
	$ConnectSCCMButton.Text = 'Connect To SCCM'
	$ConnectSCCMButton.UseVisualStyleBackColor = $False
	$ConnectSCCMButton.add_Click($ConnectSCCMButton_Click)
	#
	# SCCMTabPage2
	#
	$SCCMTabPage2.Controls.Add($UseProxyServerCheckbox)
	$SCCMTabPage2.Controls.Add($ProxyPswdInput)
	$SCCMTabPage2.Controls.Add($labelPassword)
	$SCCMTabPage2.Controls.Add($ProxyUserInput)
	$SCCMTabPage2.Controls.Add($labelUsername)
	$SCCMTabPage2.Controls.Add($ProxyServerInput)
	$SCCMTabPage2.Controls.Add($labelProxyServer)
	$SCCMTabPage2.BackColor = 'WhiteSmoke'
	$SCCMTabPage2.Location = '4, 22'
	$SCCMTabPage2.Margin = '4, 4, 4, 4'
	$SCCMTabPage2.Name = 'SCCMTabPage2'
	$SCCMTabPage2.Size = '926, 65'
	$SCCMTabPage2.TabIndex = 1
	$SCCMTabPage2.Text = 'Proxy Server Settings'
	#
	# UseProxyServerCheckbox
	#
	$UseProxyServerCheckbox.Location = '15, 17'
	$UseProxyServerCheckbox.Margin = '4, 4, 4, 4'
	$UseProxyServerCheckbox.Name = 'UseProxyServerCheckbox'
	$UseProxyServerCheckbox.Size = '176, 31'
	$UseProxyServerCheckbox.TabIndex = 27
	$UseProxyServerCheckbox.Text = 'Use A Proxy Server'
	$UseProxyServerCheckbox.UseVisualStyleBackColor = $True
	$UseProxyServerCheckbox.add_CheckedChanged($UseProxyServerCheckbox_CheckedChanged)
	#
	# ProxyPswdInput
	#
	$ProxyPswdInput.Enabled = $False
	$ProxyPswdInput.Font = 'Microsoft Sans Serif, 8.25pt'
	$ProxyPswdInput.ForeColor = 'Black'
	$ProxyPswdInput.Location = '641, 32'
	$ProxyPswdInput.Margin = '4, 3, 4, 3'
	$ProxyPswdInput.Name = 'ProxyPswdInput'
	$ProxyPswdInput.PasswordChar = '*'
	$ProxyPswdInput.Size = '150, 20'
	$ProxyPswdInput.TabIndex = 25
	#
	# labelPassword
	#
	$labelPassword.AutoSize = $True
	$labelPassword.BackColor = 'WhiteSmoke'
	$labelPassword.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelPassword.ForeColor = 'SteelBlue'
	$labelPassword.Location = '556, 35'
	$labelPassword.Margin = '4, 0, 4, 0'
	$labelPassword.Name = 'labelPassword'
	$labelPassword.Size = '61, 13'
	$labelPassword.TabIndex = 26
	$labelPassword.Text = 'Password'
	#
	# ProxyUserInput
	#
	$ProxyUserInput.Enabled = $False
	$ProxyUserInput.Font = 'Microsoft Sans Serif, 8.25pt'
	$ProxyUserInput.ForeColor = 'Black'
	$ProxyUserInput.Location = '641, 3'
	$ProxyUserInput.Margin = '4, 3, 4, 3'
	$ProxyUserInput.Name = 'ProxyUserInput'
	$ProxyUserInput.Size = '150, 20'
	$ProxyUserInput.TabIndex = 23
	#
	# labelUsername
	#
	$labelUsername.AutoSize = $True
	$labelUsername.BackColor = 'WhiteSmoke'
	$labelUsername.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelUsername.ForeColor = 'SteelBlue'
	$labelUsername.Location = '552, 6'
	$labelUsername.Margin = '4, 0, 4, 0'
	$labelUsername.Name = 'labelUsername'
	$labelUsername.Size = '63, 13'
	$labelUsername.TabIndex = 24
	$labelUsername.Text = 'Username'
	#
	# ProxyServerInput
	#
	$ProxyServerInput.CharacterCasing = 'Upper'
	$ProxyServerInput.Enabled = $False
	$ProxyServerInput.Font = 'Microsoft Sans Serif, 8.25pt'
	$ProxyServerInput.ForeColor = 'Black'
	$ProxyServerInput.Location = '308, 20'
	$ProxyServerInput.Margin = '4, 3, 4, 3'
	$ProxyServerInput.Name = 'ProxyServerInput'
	$ProxyServerInput.Size = '199, 20'
	$ProxyServerInput.TabIndex = 21
	$ProxyServerInput.Text = 'HTTP://SERVER:PORT'
	#
	# labelProxyServer
	#
	$labelProxyServer.AutoSize = $True
	$labelProxyServer.BackColor = 'WhiteSmoke'
	$labelProxyServer.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelProxyServer.ForeColor = 'SteelBlue'
	$labelProxyServer.Location = '199, 23'
	$labelProxyServer.Margin = '4, 0, 4, 0'
	$labelProxyServer.Name = 'labelProxyServer'
	$labelProxyServer.Size = '79, 13'
	$labelProxyServer.TabIndex = 22
	$labelProxyServer.Text = 'Proxy Server'
	#
	# labelPleaseNoteThisToolIs
	#
	$labelPleaseNoteThisToolIs.AutoSize = $True
	$labelPleaseNoteThisToolIs.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelPleaseNoteThisToolIs.Location = '28, 626'
	$labelPleaseNoteThisToolIs.Margin = '4, 0, 4, 0'
	$labelPleaseNoteThisToolIs.Name = 'labelPleaseNoteThisToolIs'
	$labelPleaseNoteThisToolIs.Size = '326, 13'
	$labelPleaseNoteThisToolIs.TabIndex = 36
	$labelPleaseNoteThisToolIs.Text = 'Please Note: This tool is not an official Lenovo Product '
	#
	# ClearSelectionButton
	#
	$ClearSelectionButton.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ClearSelectionButton.Location = '312, 369'
	$ClearSelectionButton.Margin = '4, 3, 4, 3'
	$ClearSelectionButton.Name = 'ClearSelectionButton'
	$ClearSelectionButton.Size = '276, 23'
	$ClearSelectionButton.TabIndex = 35
	$ClearSelectionButton.Text = 'Clear Selection'
	$ClearSelectionButton.UseVisualStyleBackColor = $True
	$ClearSelectionButton.add_Click($ClearSelectionButton_Click)
	#
	# ModelProgressOverlay
	#
	$ModelProgressOverlay.Location = '28, 594'
	$ModelProgressOverlay.Margin = '4, 3, 4, 3'
	$ModelProgressOverlay.Name = 'ModelProgressOverlay'
	$ModelProgressOverlay.Size = '934, 23'
	$ModelProgressOverlay.TabIndex = 30
	#
	# ProgressBar
	#
	$ProgressBar.Location = '28, 594'
	$ProgressBar.Margin = '4, 3, 4, 3'
	$ProgressBar.Name = 'ProgressBar'
	$ProgressBar.Size = '934, 23'
	$ProgressBar.Style = 'Continuous'
	$ProgressBar.TabIndex = 28
	#
	# ProgressListBox
	#
	$ProgressListBox.BackColor = 'WhiteSmoke'
	$ProgressListBox.Font = 'Microsoft Sans Serif, 8.25pt'
	$ProgressListBox.FormattingEnabled = $True
	$ProgressListBox.Location = '28, 422'
	$ProgressListBox.Margin = '4, 3, 4, 3'
	$ProgressListBox.Name = 'ProgressListBox'
	$ProgressListBox.ScrollAlwaysVisible = $True
	$ProgressListBox.Size = '934, 134'
	$ProgressListBox.TabIndex = 27
	#
	# AboutToolLabel
	#
	$AboutToolLabel.AutoSize = $True
	$AboutToolLabel.Font = 'Microsoft Sans Serif, 10pt'
	$AboutToolLabel.Location = '165, 61'
	$AboutToolLabel.Margin = '4, 0, 4, 0'
	$AboutToolLabel.Name = 'AboutToolLabel'
	$AboutToolLabel.Size = '593, 17'
	$AboutToolLabel.TabIndex = 26
	$AboutToolLabel.Text = ' Automates the process of downloading, extracting and importing drivers into SCCM and MDT'
	#
	# AutomationLabel
	#
	$AutomationLabel.AutoSize = $True
	$AutomationLabel.Font = 'Microsoft Sans Serif, 18pt, style=Bold'
	$AutomationLabel.ForeColor = 'SteelBlue'
	$AutomationLabel.Location = '165, 25'
	$AutomationLabel.Margin = '4, 0, 4, 0'
	$AutomationLabel.Name = 'AutomationLabel'
	$AutomationLabel.Size = '600, 29'
	$AutomationLabel.TabIndex = 25
	$AutomationLabel.Text = 'DeployEverything - Lenovo Driver Automation Tool'
	#
	# picturebox1
	#
	#region Binary Data
	$picturebox1.Image = [System.Convert]::FromBase64String('
/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAICAgICAQICAgIDAgIDAwYEAwMDAwcFBQQGCAcJCAgH
CAgJCg0LCQoMCggICw8LDA0ODg8OCQsQERAOEQ0ODg7/2wBDAQIDAwMDAwcEBAcOCQgJDg4ODg4O
Dg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg7/wAARCABQAFADASIA
AhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQA
AAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3
ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWm
p6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEA
AwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSEx
BhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElK
U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9efip
8XG8ParJ4d0GVBqSqPtVycHycjIUD+9j8q+LfHPx58HeEr5W8d+PLfT7yUb1iurlpZiPXy1DNj3x
ivJ/ix8VLvRPh3438cMRPfxxy3Maucgyu2Ez7bnXj0r8V9X1bUte8T3msaxey6jqd3KZbm4nbc8j
Huf8OgHFAH7d/wDDWvwL/wCilWv/AIB3f/xqj/hrX4F/9FKtf/AO7/8AjVfhoFLPxVlLfOOKAP3D
/wCGtPgZ/wBFJtf/AACu/wD41Sf8NafAz/opVr/4B3f/AMar8RRa8UG2+XpQB+3X/DWvwL/6KVa/
+Ad3/wDGqP8AhrX4F/8ARSrX/wAA7v8A+NV+HrwYFVipUHIoA/oQ8DfHnwd4tvmbwJ48t9QvIhva
K1uWimA9fLYK2PfGK+0vhX8XG8Q6rH4d16VDqTKfstyMDzsDJUj+9j86/ks0nV9S0HxFZaxo97Lp
2qWkoltrmB9rxsO4/kR0I4NftR8Jfirda78OvBPjlSIL+RIriRUOAJY32vj2LI3HpQB8xfGjWzdf
syeMbffnfBGMZ/6bx1+cqqWcCvpDWfH0Hir9nPW0MwXUBbxrcwk8hhKmSPY4rE/Z9+Bnib4+fHm0
8IaARZWaKJ9W1ORMx2UAOCx9WPRV7n6GgDxqGAswAGTXXt4S8Q22lC+udB1G3ssZ+0S2Uix49dxG
K/bvUPFf7Jv7C+kWeg6P4Zj8XfE5YFeR1ijn1Ikjh5JmGLcHqFXHHY9a9r/ZZ/a+m/aQ8feMNHl8
GR+GLXSLGK4jc3nnNMJHKbWGABjFOxNz+c9bMlRgUNZkJ0r6i+JV/p/hz/go18R9Ym0W31bT7Lxt
qJ/s6RAI2UXEigAYxxwQMY4Fehn9oPwcoyfhuD+MH/xFCSBt9j4LmtSARismaDAORX6BSftG+CIx
8/w1B/78f/E1ny/tM+AUzu+GZ/KD/wCJp2XcV32Pz8ZSrV+i3wS1s2v7MXhG3342RS8Z/wCm8lfP
nxn+MPhX4h+CbHS9E8ER6Fdw3Qla9ZY94XBGwbADg55z6VDoXj6Dwp+zjo0YmB1AwyrbQg8ljK/J
HoM5pFLU+ZopW86QBiN3BwevzCv2m/YynsPhH/wTB8dfFOO2SbWJkvL5iw5kW2jIhjz1wXBz9a/E
q2kze4/z1Ffrr+yL4k0zx1+wv4w+EV/cCK4VLm3dc/MILlCFcD/ZbP4047ilsfnjqWs6t4n8aap4
h16+k1LWtRunub26mbLSyOck/wCA6AYFfp3/AME0rgWnxf8AiYwON2jWw/8AIzV+Z/iDwzrPgv4g
6n4a1+1a01OxmMcqkcMOzqe6kcg+hr7W/Ym+J3g/4c/FLxhJ4u1628PwajpkUdtPdttjZkkLFS3Q
HB4z1pLcHseP/GRBN+2H8VZOu7xfqR/8mpK4rTvD0+sSzRwTW1qsShnluZdiDPQd+fwrX8e6/ZeI
Pj34317TZTPp2o+IL26tZCpXfHJcO6Ng8jKkHn1rlGvpYo2MT7M9RtBB/A1z1vbeyfsrc3S+xyYr
619Wl9Vt7S2nNe1/O2ptXHw41CQYXWdGP/b6f/ia5PXPh3qunaBdag+o6XcxQJueOC83OR7AgZpL
jW7+MZWVP+/Kf4Vzep6/qVzp8ttLMhhcYYLEqkj6gV4sHnXOudQt11ex8hRXGHtY+1dHlur2Ur26
213scHdKM1gSSsJUBJIXIGT0+Y1v3LZNclcSYvMe/wDU19CfeFOxkzqSj/PWvZfh34/1/wCHHxJs
vEvhy58m7hO2WJs+XcRn7yOPQ/pXh2mvu1mMe9dqpKuKAP1GT4l/AL4/eHLODx2sHhzxJHHtWS7n
FvLEe4jnPysuezflT7b9mX4STnzbf4izLC3Kbbm3cY+uea/MaGbB61pRvCcExoT7qKq/cjltsz9Q
Iv2YPhSQP+Lkzg/9dbf/ABqx/wAMsfCh1wfidP8A9/Lf/wCKr8xRJBgfuU/75FDSQFP9TH/3yKLr
sOz7n6Zy/sl/CSQc/FC4H/bS3/8Aiqyp/wBkD4QODn4o3X/fy3/+Kr805mhK58pP++RWTMYyD8i/
98ii67BZ9z6z/aC+BHgD4XfDaw1nwz4+Ou6jPeCE6fM0RdkIJLrsOcDAzn1r4WvJMaiw9/611BAy
SFA+gri9RfGsSD3/AK0mNGt4r8P6j8Pvjr4l8I6zC8GpaDrFxp93G4IIeGVoz+B25B9K20lSWNZI
2DIRkEV+6f8AwUK/4J7a58WfG178a/gnZxXPjWaIf8JB4f3rGdTKLtWaJjgebtABBI3YHOev4D+J
PC/jz4e+I5tG8XeG9Z8I6nExWS01bT5LZwR7OBke44NIZ1QchsirCXBGK8t/tm//AOfhqP7Zv/8A
n4agD1v7XxSG6O2vJv7a1D/n4aj+2tQ/5+GoA9RefIquzlhzXmv9s3//AD8NR/bN/wD8/DUAeiSS
pFA0kjBVXkk1ieE/D+o/EH46eGvCOjQvPqevaxb6faRoMkvNKsY/Absk+lVvDfhfx58QvEUGjeEf
DWs+LtSlYLHaaTp8ly5J9kBwPc8Cv34/4J6/8E9tc+E3jay+Nfxss4rbxrDEf+Ef8P71kOmF12tN
KwyPN2kgAE7cnnPQA//Z')
	#endregion
	$picturebox1.Location = '77, 12'
	$picturebox1.Margin = '4, 3, 4, 3'
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = '70, 70'
	$picturebox1.SizeMode = 'StretchImage'
	$picturebox1.TabIndex = 24
	$picturebox1.TabStop = $False
	#
	# ProductListBox
	#
	$ProductListBox.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ProductListBox.ForeColor = 'SteelBlue'
	$ProductListBox.FormattingEnabled = $True
	$ProductListBox.Location = '28, 214'
	$ProductListBox.Margin = '4, 3, 4, 3'
	$ProductListBox.Name = 'ProductListBox'
	$ProductListBox.SelectionMode = 'MultiExtended'
	$ProductListBox.Size = '276, 147'
	$ProductListBox.Sorted = $True
	$ProductListBox.TabIndex = 3
	#
	# StartDownloadButton
	#
	$StartDownloadButton.Anchor = 'None'
	$StartDownloadButton.BackColor = 'SteelBlue'
	$StartDownloadButton.Enabled = $False
	$StartDownloadButton.FlatAppearance.BorderSize = 0
	$StartDownloadButton.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$StartDownloadButton.ForeColor = 'White'
	$StartDownloadButton.Location = '603, 369'
	$StartDownloadButton.Margin = '4, 3, 4, 3'
	$StartDownloadButton.Name = 'StartDownloadButton'
	$StartDownloadButton.Size = '359, 23'
	$StartDownloadButton.TabIndex = 0
	$StartDownloadButton.Text = 'Start Download and Import Process'
	$StartDownloadButton.UseVisualStyleBackColor = $False
	$StartDownloadButton.add_Click($StartDownloadButton_Click)
	#
	# DownloadGroupBox
	#
	$DownloadGroupBox.Controls.Add($ArchitectureComboxBox)
	$DownloadGroupBox.Controls.Add($DownloadComboBox)
	$DownloadGroupBox.Controls.Add($PlatformComboBox)
	$DownloadGroupBox.Controls.Add($PackagePathTextBox)
	$DownloadGroupBox.Controls.Add($RepositoryTextBox)
	$DownloadGroupBox.Controls.Add($ArchitectureCheckBox)
	$DownloadGroupBox.Controls.Add($lSelectDeployLabel)
	$DownloadGroupBox.Controls.Add($OSComboBox)
	$DownloadGroupBox.Controls.Add($labelDownloadType)
	$DownloadGroupBox.Controls.Add($OperatingSysLabel)
	$DownloadGroupBox.Controls.Add($RepositoryLabel)
	$DownloadGroupBox.Controls.Add($PackagePathLabel)
	$DownloadGroupBox.BackColor = 'WhiteSmoke'
	$DownloadGroupBox.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$DownloadGroupBox.ForeColor = 'SteelBlue'
	$DownloadGroupBox.Location = '312, 198'
	$DownloadGroupBox.Margin = '4, 3, 4, 3'
	$DownloadGroupBox.Name = 'DownloadGroupBox'
	$DownloadGroupBox.Padding = '4, 3, 4, 3'
	$DownloadGroupBox.Size = '650, 165'
	$DownloadGroupBox.TabIndex = 21
	$DownloadGroupBox.TabStop = $False
	$DownloadGroupBox.Text = 'Download Selection'
	#
	# ArchitectureComboxBox
	#
	$ArchitectureComboxBox.BackColor = 'White'
	$ArchitectureComboxBox.DropDownStyle = 'DropDownList'
	$ArchitectureComboxBox.FormattingEnabled = $True
	[void]$ArchitectureComboxBox.Items.Add('64 bit')
	[void]$ArchitectureComboxBox.Items.Add('32 bit')
	$ArchitectureComboxBox.Location = '199, 113'
	$ArchitectureComboxBox.Margin = '4, 3, 4, 3'
	$ArchitectureComboxBox.Name = 'ArchitectureComboxBox'
	$ArchitectureComboxBox.Size = '140, 21'
	$ArchitectureComboxBox.TabIndex = 28
	$ArchitectureComboxBox.add_SelectedIndexChanged($ArchitectureComboxBox_SelectedIndexChanged)
	#
	# DownloadComboBox
	#
	$DownloadComboBox.BackColor = 'White'
	$DownloadComboBox.DropDownStyle = 'DropDownList'
	$DownloadComboBox.Enabled = $False
	$DownloadComboBox.FormattingEnabled = $True
	[void]$DownloadComboBox.Items.Add('Drivers')
	$DownloadComboBox.Location = '13, 113'
	$DownloadComboBox.Margin = '4, 3, 4, 3'
	$DownloadComboBox.Name = 'DownloadComboBox'
	$DownloadComboBox.Size = '140, 21'
	$DownloadComboBox.TabIndex = 27
	#
	# PlatformComboBox
	#
	$PlatformComboBox.BackColor = 'White'
	$PlatformComboBox.DropDownStyle = 'DropDownList'
	$PlatformComboBox.FormattingEnabled = $True
	[void]$PlatformComboBox.Items.Add('SCCM')
	[void]$PlatformComboBox.Items.Add('MDT')
	[void]$PlatformComboBox.Items.Add('Both')
	$PlatformComboBox.Location = '13, 47'
	$PlatformComboBox.Margin = '4, 3, 4, 3'
	$PlatformComboBox.Name = 'PlatformComboBox'
	$PlatformComboBox.Size = '140, 21'
	$PlatformComboBox.TabIndex = 26
	$PlatformComboBox.add_SelectedValueChanged($PlatformComboBox_SelectedValueChanged)
	#
	# PackagePathTextBox
	#
	$PackagePathTextBox.CharacterCasing = 'Upper'
	$PackagePathTextBox.Font = 'Microsoft Sans Serif, 8.25pt'
	$PackagePathTextBox.Location = '377, 113'
	$PackagePathTextBox.Margin = '4, 3, 4, 3'
	$PackagePathTextBox.Name = 'PackagePathTextBox'
	$PackagePathTextBox.Size = '247, 20'
	$PackagePathTextBox.TabIndex = 22
	$PackagePathTextBox.Text = '\\SERVER\SHARE'
	#
	# RepositoryTextBox
	#
	$RepositoryTextBox.CharacterCasing = 'Upper'
	$RepositoryTextBox.Font = 'Microsoft Sans Serif, 8.25pt'
	$RepositoryTextBox.Location = '377, 46'
	$RepositoryTextBox.Margin = '4, 3, 4, 3'
	$RepositoryTextBox.Name = 'RepositoryTextBox'
	$RepositoryTextBox.Size = '247, 20'
	$RepositoryTextBox.TabIndex = 21
	$RepositoryTextBox.Text = '\\SERVER\SHARE'
	#
	# ArchitectureCheckBox
	#
	$ArchitectureCheckBox.AutoSize = $True
	$ArchitectureCheckBox.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ArchitectureCheckBox.ForeColor = 'Black'
	$ArchitectureCheckBox.Location = '199, 94'
	$ArchitectureCheckBox.Margin = '4, 0, 4, 0'
	$ArchitectureCheckBox.Name = 'ArchitectureCheckBox'
	$ArchitectureCheckBox.Size = '76, 13'
	$ArchitectureCheckBox.TabIndex = 20
	$ArchitectureCheckBox.Text = 'Architecture'
	#
	# lSelectDeployLabel
	#
	$lSelectDeployLabel.AutoSize = $True
	$lSelectDeployLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$lSelectDeployLabel.ForeColor = 'Black'
	$lSelectDeployLabel.Location = '10, 28'
	$lSelectDeployLabel.Margin = '4, 0, 4, 0'
	$lSelectDeployLabel.Name = 'lSelectDeployLabel'
	$lSelectDeployLabel.Size = '123, 13'
	$lSelectDeployLabel.TabIndex = 14
	$lSelectDeployLabel.Text = 'Deployment Platform'
	#
	# OSComboBox
	#
	$OSComboBox.DropDownStyle = 'DropDownList'
	$OSComboBox.FormattingEnabled = $True
	[void]$OSComboBox.Items.Add('Windows 10')
	[void]$OSComboBox.Items.Add('Windows 8.1')
	[void]$OSComboBox.Items.Add('Windows 7')
	$OSComboBox.Location = '199, 47'
	$OSComboBox.Margin = '4, 3, 4, 3'
	$OSComboBox.Name = 'OSComboBox'
	$OSComboBox.Size = '140, 21'
	$OSComboBox.TabIndex = 16
	$OSComboBox.add_SelectedIndexChanged($OSComboBox_SelectedIndexChanged)
	#
	# labelDownloadType
	#
	$labelDownloadType.AutoSize = $True
	$labelDownloadType.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelDownloadType.ForeColor = 'Black'
	$labelDownloadType.Location = '10, 94'
	$labelDownloadType.Margin = '4, 0, 4, 0'
	$labelDownloadType.Name = 'labelDownloadType'
	$labelDownloadType.Size = '95, 13'
	$labelDownloadType.TabIndex = 13
	$labelDownloadType.Text = 'Download Type'
	#
	# OperatingSysLabel
	#
	$OperatingSysLabel.AutoSize = $True
	$OperatingSysLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$OperatingSysLabel.ForeColor = 'Black'
	$OperatingSysLabel.Location = '199, 28'
	$OperatingSysLabel.Margin = '4, 0, 4, 0'
	$OperatingSysLabel.Name = 'OperatingSysLabel'
	$OperatingSysLabel.Size = '106, 13'
	$OperatingSysLabel.TabIndex = 17
	$OperatingSysLabel.Text = 'Operating System'
	#
	# RepositoryLabel
	#
	$RepositoryLabel.AutoSize = $True
	$RepositoryLabel.ForeColor = 'Black'
	$RepositoryLabel.Location = '377, 28'
	$RepositoryLabel.Margin = '4, 0, 4, 0'
	$RepositoryLabel.Name = 'RepositoryLabel'
	$RepositoryLabel.Size = '97, 13'
	$RepositoryLabel.TabIndex = 23
	$RepositoryLabel.Text = 'Repository Path'
	#
	# PackagePathLabel
	#
	$PackagePathLabel.AutoSize = $True
	$PackagePathLabel.ForeColor = 'Black'
	$PackagePathLabel.Location = '377, 94'
	$PackagePathLabel.Margin = '4, 0, 4, 0'
	$PackagePathLabel.Name = 'PackagePathLabel'
	$PackagePathLabel.Size = '87, 13'
	$PackagePathLabel.TabIndex = 24
	$PackagePathLabel.Text = 'Package Path'
	#
	# ModelListBox
	#
	$ModelListBox.AutoSize = $True
	$ModelListBox.BackColor = 'Transparent'
	$ModelListBox.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ModelListBox.Location = '28, 198'
	$ModelListBox.Margin = '4, 0, 4, 0'
	$ModelListBox.Name = 'ModelListBox'
	$ModelListBox.Size = '65, 13'
	$ModelListBox.TabIndex = 4
	$ModelListBox.Text = 'Model List'
	#
	# ModelProgressLabel
	#
	$ModelProgressLabel.AutoSize = $True
	$ModelProgressLabel.BackColor = 'Transparent'
	$ModelProgressLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$ModelProgressLabel.Location = '28, 578'
	$ModelProgressLabel.Margin = '4, 0, 4, 0'
	$ModelProgressLabel.Name = 'ModelProgressLabel'
	$ModelProgressLabel.Size = '94, 13'
	$ModelProgressLabel.TabIndex = 32
	$ModelProgressLabel.Text = 'Model Progress'
	#
	# LoggingLabel
	#
	$LoggingLabel.AutoSize = $True
	$LoggingLabel.BackColor = 'Transparent'
	$LoggingLabel.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$LoggingLabel.Location = '28, 406'
	$LoggingLabel.Margin = '4, 0, 4, 0'
	$LoggingLabel.Name = 'LoggingLabel'
	$LoggingLabel.Size = '101, 13'
	$LoggingLabel.TabIndex = 34
	$LoggingLabel.Text = 'Job Process Log'
	#
	# OpenMDTFileDialog
	#
	$DownloadGroupBox.ResumeLayout()
	$SCCMTabPage2.ResumeLayout()
	$SCCMTabPage1.ResumeLayout()
	$SCCMDellTabControl.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	#$ErrorActionPreference = 'SilentlyContinue'
	#$WarningPreference = 'SilentlyContinue'
	
	# Define Lenovo Download Sources
	$LenovoXMLSource = "https://download.lenovo.com/cdrt/td/catalog.xml"
	
	# Define Lenovo Cabinet/XL Names and Paths
	$LenovoXMLFile = [string]($LenovoXMLSource | Split-Path -Leaf)
	
	# ArrayList to store the Dell models in
	$LenovoProducts = New-Object -TypeName System.Collections.ArrayList
	
	# MDT PS Commandlets
	$MDTPSCommandlets = "C:\Program Files\Microsoft Deployment Toolkit\bin\MicrosoftDeploymentToolkit.psd1"
	
	# Log File Location
	$LogFile = "$env:TEMP\DeployEverythingLenovoLog.txt"
	
	# Proxy Validation Initial State
	$ProxyValidated = $false
	
	# Query SCCM Site Code
	function QuerySiteCode ($SiteServer)
	{
		$SiteCodeObjects = Get-WmiObject -Namespace "root\SMS" -Class SMS_ProviderLocation -ComputerName $([string]$SiteServer) -ErrorAction Stop
		if ($SiteCodeObjects -gt $null)
		{
			foreach ($SiteCodeObject in $SiteCodeObjects)
			{
				if ($SiteCodeObject.ProviderForLocalSite -eq $true)
				{
					$SiteCode = $SiteCodeObject.SiteCode
					$ProgressListBox.Items.Add("Site Code Found: $($SiteCode)")
					$SiteCodeText.Text = $SiteCode
				}
			}
		}
		else
		{
			$ProgressListBox.ForeColor = "Red"
			$ProgressListBox.Items.Add(" ")
			$ProgressListBox.Items.Add("Error Site Code Not Found: Please check your security rights to the $SiteServer server.")
		}
	}
	
	# Find / Refresh Lenovo Models
	function UpdateModeList
	{
		$ProgressListBox.Items.Clear()
		
		# Check for Proxy use and set variables
		if ($ProxyValidated -eq $false)
		{
			if (($UseProxyServerCheckbox.Checked -eq $true) -and ($ProxyValidated -eq $false))
			{
				$ProxyUser = [string]$ProxyUserInput.Text
				$ProxyPswd = ConvertTo-SecureString $ProxyPswdInput.Text -AsPlainText -Force
				$ProxyServer = [string]$ProxyServerInput.Text
				$ProxyCred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ProxyUser, $ProxyPswd
				$ProxyCheck = Invoke-WebRequest -Uri $LenovoXMLSource -Proxy $ProxyServer -ProxyUseDefaultCredentials
				# Try credential method if pass through fails
				if ($ProxyCheck -eq $null)
				{
					$ProxyCheck = Invoke-WebRequest -Uri $LenovoXMLSource -Proxy $ProxyServer -ProxyCredential $ProxyCred
				}
				if ($ProxyCheck.StatusDescription -eq "OK")
				{
					$ProgressListBox.ForeColor = "Black"
					$ProgressListBox.Items.Add("======== Validating Proxy ======== ")
					$ProgressListBox.Items.Add(" ")
					$ProgressListBox.Items.Add("PROXY: Connection to Lenovo XML site validated via proxy $ProxyServer ")
					$ProgressListBox.Items.Add(" ")
					$ProxyError = $false
					UpdateLogWindow
				}
				else
				{
					$ProgressListBox.ForeColor = "Red"
					$ProgressListBox.Items.Add("PROXY: Error. Please Check Proxy Server Details Are Valid ")
					$ProxyError = $true
					UpdateLogWindow
				}
			}
		}
		
		if ($ProxyError -ne $true)
		{
			
			# Rest Product Listbox
			$ProductListBox.Items.Clear()
			
			# Read XML File
			$ProgressListBox.Items.Add("======== Reading Lenovo Product List ======== ")
			UpdateLogWindow
			if ($ProxyValidated -eq $true)
			{
				# Try both credential and default methods
				[xml]$LenovoModelXML = Invoke-WebRequest -Uri $LenovoXMLSource -Proxy $ProxyServer -ProxyUseDefaultCredentials
				If ($LenovoModelXML -eq $null)
				{
					[xml]$LenovoModelXML = Invoke-WebRequest -Uri $LenovoXMLSource -Proxy $ProxyServer -ProxyCredential $ProxyCred
				}
			}
			else
			{
				[xml]$LenovoModelXML = Invoke-WebRequest -Uri $LenovoXMLSource
			}
			
			# Set XML Object
			$LenovoModelXML.GetType().FullName
			$LenovoModelDriver = $LenovoModelXML.Products
			# Find Models Contained Within Downloaded XML
			If ($OSComboBox.Text -like "Windows 10")
			{
				$OSSelected = "Win10"
				$LenovoModels = ($LenovoModelDriver).Product | Where-Object { ($_.OS -like $OSSelected) }
			}
			If ($OSComboBox.Text -like "Windows 8.1")
			{
				$OSSelected = "Win81"
				$LenovoModels = ($LenovoModelDriver).Product | Where-Object { ($_.OS -like $OSSelected) }
			}
			If ($OSComboBox.Text -like "Windows 7")
			{
				$LenovoModels = ($LenovoModelDriver).Product | Where-Object { ($_.OS -like "*Win*$(($OSComboBox.Text).split(' ')[1])*$(($ArchitectureComboxBox.Text).Split(' ')[0])*") }
			}
			if ($LenovoModels -ne $null)
			{
				foreach ($Model in $LenovoModels.Model)
				{
					$Model = $Model -replace "Win[^;]*", " "
					
					if ($Model -notin $LenovoProducts)
					{
						$LenovoProducts.Add($Model.Model) | Out-Null
						$ProductListBox.Items.Add($Model)
					}
				}
				$StartDownloadButton.Enabled = $true
			}
			$ProductListBox.Sorted
			if (($LenovoModels).Count -gt "0")
			{
				$ProgressListBox.Items.Add("INFO: Found $(($LenovoModels).count) Lenovo Model Driver Packs for $($OSComboBox.text) $($ArchitectureComboxBox.text)")
				$ProgressListBox.Items.Add(" ")
				UpdateLogWindow
			}
			else
			{
				$ProgressListBox.Items.Add("INFO: No Lenovo Models Found. If you are using a proxy server please specify the proxy in the Proxy Server Settings tab.")
				$ProgressListBox.Items.Add(" ")
				UpdateLogWindow
			}
			
			
		}
		
	}
	
	
	function UpdateLogWindow
	{
		$ProgressListBox.SelectedIndex = $ProgressListBox.Items.Count - 1;
		$ProgressListBox.SelectedIndex = -1;
	}
	
	function FindDriver
	{
	<# ============ Find Driver Function Provided Courtesy Of Lenovo ===================
	 # This powershell file will extract the link for the specified driver pack or application
	 # param $URI The string version of the URL
	 # param $64bit A boolean to determine what version to pick if there are multiple
	 #
	 # v1.1 Fixes multiple script tag issue
	 #>
		param (
			[string]$URI,
			[string]$OSArchitecture,
			$ProxyServer,
			$ProxyCred
		)
		
		# set 32 or 64bit swtich
		if ($OSArchitecture -eq "x86")
		{
			$64bit = $true
		}
		else
		{
			$64bit = $false
		}
		
		#Case for direct link to a zip file
		if ($URI.EndsWith(".zip"))
		{
			return $URI
		}
		
		$err = @()
		
		#Get the content of the website
		if ($ProxyCred -gt $null)
		{
			$html = Invoke-WebRequest –Uri $URI -Proxy $ProxyServer -ProxyUseDefaultCredentials		
			# Fall back to using specified credentials
			if ($html -eq $null)
			{
				$html = Invoke-WebRequest –Uri $URI -Proxy $ProxyServer -ProxyCredential $ProxyCred
			}
		}
		else
		{
			$html = Invoke-WebRequest –Uri $URI
		}
		
		#Create an array to hold all the links to exe files
		$anchors = @()
		
		#determine if the URL resolves to the old download location
		if ($URI -like "*olddownloads*")
		{
			#Quickly grab the links that end with exe
			$anchors = (($html.Links | Where-Object { $_.href -like "*exe" }) | Where class -eq "downloadBtn").href
		}
		
		#new download page style
		else
		{
			#everything is embedded in script tags that are parsed to fill in the page
			#grab all the script tags that have a exe link in them
			$tags = ($html.ParsedHtml.getElementsByTagName("script") | Where-Object { $_.text -like "*.exe*" })
			
			#we need to work backwards to parse the tags
			$currentIndex = $tags.text.Length
			
			do
			{
				#find the farthest occurance of exe in the script tag
				$farthestEXE = $tags.text.lastIndexOf(".exe`"", $currentIndex)
				
				#we are done if it returns -1
				if ($farthestEXE -gt -1)
				{
					#all the urls are prepended with "URL" so find the one right before our exe
					$farthestURL = ($tags.text.lastIndexOf("`"URL`"", $farthestEXE))
					#snag the link
					$anchors += ($tags.text.Substring($farthestURL + 7, $farthestEXE - $farthestURL - 3))
					#move our pointer to the beginning of the URL
					$currentIndex = $farthestURL
				}
			}
			while ($farthestEXE -gt 0)
		}
		
		if ($anchors.Count -eq 0)
		{
			return "badLink"
		}
		
		#if we only found one link return it
		if ($anchors.Count -eq 1)
		{
			return $anchors[0]
		}
		#if there are multiple links then pick based on $64bit
		if ($anchors.Count -gt 1)
		{
			foreach ($anchor in $anchors)
			{
				if ((($anchor -like "*64_*" -or $anchor -like "*_64*") -and $64bit) -or (($anchor -like "*32_*" -or $anchor -like "*_32*") -and (-not $64bit)))
				{
					return $anchor
				}
			}
		}
	}
	
	
	
#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
